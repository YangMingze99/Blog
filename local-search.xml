<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React18部分新特性</title>
    <link href="/2021/12/30/React18/"/>
    <url>/2021/12/30/React18/</url>
    
    <content type="html"><![CDATA[<h1 id="React18-部分新特性"><a href="#React18-部分新特性" class="headerlink" title="React18 部分新特性"></a>React18 部分新特性</h1><h2 id="1-新的-Root-API"><a href="#1-新的-Root-API" class="headerlink" title="1.新的 Root API"></a>1.新的 Root API</h2><h3 id="React18"><a href="#React18" class="headerlink" title="React18"></a>React18</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; BrowserRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/index/App&#x27;</span>;<br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br>ReactDOM.createRoot(container).render(<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><h3 id="before-react18"><a href="#before-react18" class="headerlink" title="before react18"></a>before react18</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; BrowserRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/index/App&#x27;</span>;<br><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br>ReactDOM.render(<br> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span>,<br> container<br>);<br></code></pre></td></tr></table></figure><h2 id="2-state自动批处理合并-回调"><a href="#2-state自动批处理合并-回调" class="headerlink" title="2.state自动批处理合并(回调)"></a>2.state自动批处理合并(回调)</h2><p>tips:state更新机制(before react18)<br>     在React生命周期和合成事件中多次 setState 会被 batch 为一次更新<br>     在一个原生事件，setTimeout，setInterval，Promise等异步操作中setState，react 不会 batch</p><h2 id="3-startTransition-API-useTransition-hooks-（-concurrent-mode-）"><a href="#3-startTransition-API-useTransition-hooks-（-concurrent-mode-）" class="headerlink" title="3.startTransition API  (useTransition hooks) （ concurrent mode ）"></a>3.startTransition API  (useTransition hooks) （ concurrent mode ）</h2><p>startTransition API 它有助于保持当前网页的响应性并能够同时进行大量的非阻塞 UI 更新，可以让开发者显式的指定那个UI渲染的优先级更高，哪些需要实时更新哪些需要延迟更新。</p><p>简单点 这个东东 可以区分 非紧急 的状态更新 ，比如地址框下拉搜索 dddd</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; startTransition &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">const</span> handleChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    setInputValue(e.target.value)<br>    startTransition(<span class="hljs-function">() =&gt;</span> &#123;<br>        setSearchQuery(e.target.value)<br>     &#125;)<br>&#125;<br> <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Please Input&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">       /&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">NewList</span> <span class="hljs-attr">query</span>=<span class="hljs-string">&#123;query&#125;</span> /&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><p>所有在 startTransition 回调中的更新都会被认为是非紧急处理，如果出现更紧急的更新（比如又输入新的值），则上面的更新都会被中断，直到没有其他紧急操作之后才会去继续执行更新。</p><p>（快2202年了  联想搜索还在写防抖吗）</p><p><a href="https://github.com/reactwg/react-18/discussions/41">New feature: startTransition</a></p><h2 id="4-Hooks-API-useDeferredValue-（-concurrent-mode-）"><a href="#4-Hooks-API-useDeferredValue-（-concurrent-mode-）" class="headerlink" title="4.Hooks API  -  useDeferredValue  （ concurrent mode ）"></a>4.Hooks API  -  useDeferredValue  （ concurrent mode ）</h2><p>与上节useTransition效果类似</p><p>详见：</p><p><a href="https://blog.csdn.net/weixin_43294560/article/details/121428955">useTranstion和useDeferredValue原理</a></p><p><a href="https://blog.csdn.net/weixin_43294560/article/details/121428773">ReactHook useTranstion和useDeferredValue</a></p><p><a href="https://zhuanlan.zhihu.com/p/425009300">React 18 Concurrent 之 useDeferredValue</a></p><h2 id="5-React-lazy-、Suspense组件支持SSR"><a href="#5-React-lazy-、Suspense组件支持SSR" class="headerlink" title="5.React.lazy 、Suspense组件支持SSR"></a>5.React.lazy 、Suspense组件支持SSR</h2><p>详见：</p><p><a href="https://github.com/reactwg/react-18/discussions/37">New Suspense SSR Architecture in React 18 </a></p><p><a href="https://github.com/reactwg/react-18/discussions/22">Upgrading to React 18 on the server</a></p><h2 id="其他相关文档"><a href="#其他相关文档" class="headerlink" title="其他相关文档"></a>其他相关文档</h2><p><a href="https://zh-hans.reactjs.org/docs/concurrent-mode-reference.html">Concurrent 模式 API  文档</a></p><p><a href="https://react.docschina.org/docs/concurrent-mode-patterns.html">Concurrent UI 模式</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蛮好用的API - IntersectionObserver</title>
    <link href="/2021/11/17/IntersectionObserver/"/>
    <url>/2021/11/17/IntersectionObserver/</url>
    
    <content type="html"><![CDATA[<h1 id="蛮好用的API-IntersectionObserver"><a href="#蛮好用的API-IntersectionObserver" class="headerlink" title="蛮好用的API - IntersectionObserver"></a>蛮好用的API - IntersectionObserver</h1><h2 id="Part-1-三个大聪明"><a href="#Part-1-三个大聪明" class="headerlink" title="Part 1  三个大聪明"></a>Part 1  三个大聪明</h2><p>从前啊 有一个需求它叫商品曝光ctr埋点上报时机优化…</p><p>商品曝光埋点嘛 那不就是商品卡出现在可视区域就上报下信息嘛..  先搞一个判断是不是在可视区域的逻辑！</p><p>很快啊</p><p>大聪明[0]甩出了自己的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isInViewWindow</span>(<span class="hljs-params">el</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> viewPortHeight = <span class="hljs-built_in">window</span>.innerHeight || <span class="hljs-built_in">document</span>.documentElement.clientHeight || <span class="hljs-built_in">document</span>.body.clientHeight;<br>    <span class="hljs-keyword">const</span> offsetTop = el.offsetTop;<br>    <span class="hljs-keyword">const</span> scrollTop = <span class="hljs-built_in">document</span>.documentElement.scrollTop;<br>    cosnt top = offsetTop - scrollTop;<br>    <span class="hljs-keyword">return</span> top &lt;= viewPortHeight;<br>&#125;<br></code></pre></td></tr></table></figure><p>大聪明[0]：这个整挺好 都嘎嘎兼容  就是document写的有点累</p><p>大聪明[1]此时开始发炎：诶 你这多草率 快看看之前的代码有人用到了传说中的<strong>Element.getBoundingClientRect()</strong></p><blockquote><p><code>**Element.getBoundingClientRect()**</code> 方法返回元素的大小及其相对于视口的位置。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isInViewWindow</span>(<span class="hljs-params">el</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> viewWidth = <span class="hljs-built_in">window</span>.innerWidth || <span class="hljs-built_in">document</span>.documentElement.clientWidth;<br>    <span class="hljs-keyword">const</span> viewHeight = <span class="hljs-built_in">window</span>.innerHeight || <span class="hljs-built_in">document</span>.documentElement.clientHeight;<br>    <span class="hljs-keyword">const</span> &#123;<br>        top,<br>        left,<br>        bottom,<br>        right<br>     &#125; = el.getBoundingClientRect();<br>     <span class="hljs-keyword">return</span> top&gt;=<span class="hljs-number">0</span> &amp;&amp; left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt;= viewWidth &amp;&amp; bottom &lt;=viewHeight;<br>&#125;<br></code></pre></td></tr></table></figure><p>大聪明[2]：诶  我怎么不光看到<strong>getBoundingClientRect</strong>还看到了这个东西<strong>IntersectionObserver</strong></p><p>这是啥？</p><h2 id="Part-2-IntersectionObserver-介绍及用法"><a href="#Part-2-IntersectionObserver-介绍及用法" class="headerlink" title="Part 2  IntersectionObserver 介绍及用法"></a>Part 2  IntersectionObserver 介绍及用法</h2><p><strong>Intersection Observer</strong> API 提供了一种异步检测目标元素与祖先元素或 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport">viewport</a> 相交情况变化的方法。过去，相交检测通常要用到事件监听，并且需要频繁调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect"><code>Element.getBoundingClientRect()</code></a> 方法以获取相关元素的边界信息。事件监听和调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect"><code>Element.getBoundingClientRect()</code></a> 都是在主线程上运行，因此频繁触发、调用可能会造成性能问题。这种检测方法极其怪异且不优雅。</p><p>当然上面是MDN文档说的一部分，简单来说就是：保证性能的前提下<strong>监听目标元素与其祖先或视窗的交叉状态</strong>。</p><p>使用API当然要考虑兼容问题，好在这是2016年Chrome率先推出的API，目前的兼容性还不错当然<strong>IE</strong>除外。</p><p>官方同时提供了 <a href="https://github.com/w3c/IntersectionObserver/tree/master/polyfill">polyfill</a>提高兼容性，这样我们就可以在项目中愉快的玩耍了</p><img src="/2021/11/17/IntersectionObserver/%E5%85%BC%E5%AE%B9%E6%80%A7.png" class=""><p>IntersectionObserver使用方式也很简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> io = <span class="hljs-keyword">new</span> IntersectionObserver(callback, options);<br></code></pre></td></tr></table></figure><p><code>IntersectionObserver</code>支持两个参数：</p><ol><li><p><code>callback</code>是当被监听元素的可见性变化时，触发的回调函数</p><p>接收一个参数entries，即IntersectionObserverEntry实例。描述了目标元素与root的交叉状态。具体参数如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>boundingClientRect</td><td>返回包含目标元素的边界信息，返回结果与element.getBoundingClientRect() 相同</td></tr><tr><td><strong>intersectionRatio</strong></td><td>返回目标元素出现在可视区的比例</td></tr><tr><td>intersectionRect</td><td>用来描述root和目标元素的相交区域</td></tr><tr><td><strong>isIntersecting</strong></td><td>返回一个布尔值，下列两种操作均会触发callback：1. 如果目标元素出现在root可视区，返回true。2. 如果从root可视区消失，返回false</td></tr><tr><td>rootBounds</td><td>用来描述交叉区域观察者(intersection observer)中的根.</td></tr><tr><td>target</td><td>目标元素：与根出现相交区域改变的元素 (Element)</td></tr><tr><td>time</td><td>返回一个记录从 IntersectionObserver 的时间原点到交叉被触发的时间的时间戳</td></tr></tbody></table></li><li><p><code>options</code>是一个配置参数，可选项，有默认的属性值，包含三个属性</p></li><li><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>root</td><td>所监听对象的具体祖先元素。如果未传入值或值为null，则默认使用顶级文档的视窗(一般为html)。</td></tr><tr><td>rootMargin</td><td>计算交叉时添加到<strong>根(root)*<em>边界盒<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/en-US/docs/Glossary/bounding_box">bounding box</a>的矩形偏移量， 可以有效的缩小或扩大根的判定范围从而满足计算需要。所有的偏移量均可用*<em>像素</em></em>(<code>px</code>)或</strong>百分比**(<code>%</code>)来表达, 默认值为”0px 0px 0px 0px”。</td></tr><tr><td>threshold</td><td>一个包含阈值的列表, 按升序排列, 列表中的每个阈值都是监听对象的交叉区域与边界区域的比率。当监听对象的任何阈值被越过时，都会触发callback。默认值为0。</td></tr></tbody></table></li></ol><p>​        rootMargin：10px 15px 20px 30px</p><img src="/2021/11/17/IntersectionObserver/viewport.jpg" class=""><p><em>root元素只有在<code>rootMargin</code>为空的时候才是绝对的视窗</em></p><h2 id="Part3-实际应用"><a href="#Part3-实际应用" class="headerlink" title="Part3 实际应用"></a>Part3 实际应用</h2><h3 id="1-曝光埋点"><a href="#1-曝光埋点" class="headerlink" title="1.曝光埋点"></a>1.曝光埋点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> boxList = [...document.querySelectorAll(<span class="hljs-string">&#x27;.box&#x27;</span>)]<br><span class="hljs-keyword">var</span> io = <span class="hljs-keyword">new</span> IntersectionObserver(<span class="hljs-function">(<span class="hljs-params">entries</span>) =&gt;</span>&#123;<br>  entries.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// intersectionRatio 曝光判定根据业务需求确定这里以50%为定</span><br>    <span class="hljs-keyword">if</span> (item.intersectionRatio === <span class="hljs-number">0.5</span>) &#123;<br>      <span class="hljs-comment">// 埋点曝光代码或者props传递进来的onshow方法</span><br>      io.unobserve(item.target) <span class="hljs-comment">//用完就丢掉 给浏览器减负一下</span><br>    &#125;<br>  &#125;)<br>&#125;, &#123;<br>  <span class="hljs-attr">threshold</span>: [<span class="hljs-number">0.5</span>], <span class="hljs-comment">// 阀值设为0.5，当只有比例达到0.5时才触发回调函数</span><br>&#125;)<br><span class="hljs-comment">// observe遍历监听所有box节点</span><br>boxList.forEach(<span class="hljs-function"><span class="hljs-params">box</span> =&gt;</span> io.observe(box))<br><br></code></pre></td></tr></table></figure><h3 id="2-加载更多"><a href="#2-加载更多" class="headerlink" title="2.加载更多"></a>2.加载更多</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadMore</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> IntersectionObserver(<br>    <span class="hljs-function">(<span class="hljs-params">entries</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> loadingEntry = entries[<span class="hljs-number">0</span>]<br>      <span class="hljs-keyword">if</span> (loadingEntry.isIntersecting) &#123;<br>        <span class="hljs-comment">// 发请求  拿到数据然后大家懂得都懂</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">rootMargin</span>: <span class="hljs-string">&#x27;0px 0px 200px 0px&#x27;</span>, <span class="hljs-comment">// 扩大viewport 提前加载 优化下用户体验</span><br>    &#125;,<br>  )<br><br>  observer.observe(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.mod_loading&#x27;</span>)) <span class="hljs-comment">// 观察元素</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-元素吸顶、吸底"><a href="#3-元素吸顶、吸底" class="headerlink" title="3.元素吸顶、吸底"></a>3.元素吸顶、吸底</h3><p>除了CSS粘性定位以外也可以用这个来实现，将需要吸顶/底的元素外包裹一层父元素并赋予高度占位，防止需要吸顶/底的元素固定时页面有抖动效果出现，并监听父元素状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fixedELeMent</span>(<span class="hljs-params">parentEle, fixEle</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ele = fixEle<br>  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> IntersectionObserver(<span class="hljs-function">(<span class="hljs-params">entries</span>) =&gt;</span> &#123;<br>    entries.forEach(<span class="hljs-function">(<span class="hljs-params">entry</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (entry.isIntersecting) &#123;<br>        ele.style.cssText = <span class="hljs-string">&#x27;&#x27;</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        ele.style.cssText = <span class="hljs-string">&#x27;position: fixed; top: 0; left: 0&#x27;</span><br>      &#125;<br>    &#125;)<br>  &#125;, &#123;<br>    <span class="hljs-attr">threshold</span>: <span class="hljs-number">1</span>, <br>  &#125;)<br>  observer.observe(parentEle);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-懒加载"><a href="#4-懒加载" class="headerlink" title="4.懒加载"></a>4.懒加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> imgList = [...document.querySelectorAll(<span class="hljs-string">&#x27;img&#x27;</span>)]<br><span class="hljs-keyword">var</span> io = <span class="hljs-keyword">new</span> IntersectionObserver(<span class="hljs-function">(<span class="hljs-params">entries</span>) =&gt;</span>&#123;<br>  entries.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (item.isIntersecting) &#123;<br>      item.target.src = item.target.dataset.src<br>      io.unobserve(item.target)<br>    &#125;<br>  &#125;)<br>&#125;, &#123;<br><span class="hljs-attr">rootMargin</span>: <span class="hljs-string">`0px 0px 50px 0px`</span>,<br>&#125;)<br>imgList.forEach(<span class="hljs-function"><span class="hljs-params">img</span> =&gt;</span> io.observe(img))<br></code></pre></td></tr></table></figure><h2 id="Part-4-参考"><a href="#Part-4-参考" class="headerlink" title="Part 4 参考"></a>Part 4 参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect">Element.getBoundingClientRect()</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">Position:sticky</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FirstPage</title>
    <link href="/2021/11/16/FirstPage/"/>
    <url>/2021/11/16/FirstPage/</url>
    
    <content type="html"><![CDATA[<h1 id="试一下MarkDown渲染器"><a href="#试一下MarkDown渲染器" class="headerlink" title="试一下MarkDown渲染器"></a>试一下MarkDown渲染器</h1><h2 id="1-加个图片试试"><a href="#1-加个图片试试" class="headerlink" title="1.加个图片试试"></a>1.加个图片试试</h2><img src="/2021/11/16/FirstPage/01.jpg" class=""><h2 id="2-加个代码块试试"><a href="#2-加个代码块试试" class="headerlink" title="2.加个代码块试试"></a>2.加个代码块试试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getServerSideProps: GetServerSideProps&lt;Partial&lt;OrderRelatedProp&gt;&gt; = <span class="hljs-keyword">async</span> (ctx: BaseContext) =&gt; &#123;<br><span class="hljs-keyword">const</span> redirect = isRedirect(ctx);<br><span class="hljs-keyword">if</span> (redirect) &#123;<br><span class="hljs-keyword">return</span> redirect;<br>&#125;<br><br><span class="hljs-keyword">const</span> DOMid = ctx?.query?.DOMid <span class="hljs-keyword">as</span> string || <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">const</span> id = ctx?.query?.id <span class="hljs-keyword">as</span> string || <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">const</span> baseInfo = ctx.req.baseInfo || <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> language = baseInfo?.language;<br><br><span class="hljs-keyword">const</span> key = language === <span class="hljs-string">&quot;en&quot;</span> ? <span class="hljs-string">&quot;_Help_CMS_FAQ_EZ_SHIP_en&quot;</span> : <span class="hljs-string">`_Help_CMS_FAQ_EZ_SHIP_zh-CN`</span>;<br><br><span class="hljs-keyword">const</span> [, res] = <span class="hljs-keyword">await</span> e(ListCmsProSubjects)([key]);<br><span class="hljs-keyword">let</span> cmsHtml: any = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (res[key] &amp;&amp; res[key].html) &#123;<br>cmsHtml = <span class="hljs-built_in">JSON</span>.parse(res[key].html);<br>&#125;<br><br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">props</span>: &#123;<br>cmsHtml,<br>DOMid,<br>id<br>&#125;<br>&#125;;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> OrderRelated;<br></code></pre></td></tr></table></figure><h2 id="3-试试自动构建推送"><a href="#3-试试自动构建推送" class="headerlink" title="3.试试自动构建推送"></a>3.试试自动构建推送</h2><p>似乎可以了  补充下token~！</p><h2 id="4-改一下文章配置"><a href="#4-改一下文章配置" class="headerlink" title="4.改一下文章配置"></a>4.改一下文章配置</h2><p>，，，，，</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
